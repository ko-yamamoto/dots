function onUnload() { }

// vim:set ft=javascript sw=4 ts=4 et :
piyo.ui.registerSource("history", {
    title: "history",
    description: "history source",
    keys: ["title", "uri"],
    get: function (filter, maxItems) {
        // no query parameters will get all history
        let query = services.get("history").getNewQuery();
        let options = services.get("history").getNewQueryOptions();

        if (typeof filter == "string")
            filter = { searchTerms: filter };
        for (let [k, v] in Iterator(filter))
            query[k] = v;
        options.sortingMode = options.SORT_BY_DATE_DESCENDING;
        options.resultType = options.RESULTS_AS_URI;
        if (maxItems > 0)
            options.maxResults = maxItems;

        //let fav = Cc["@mozilla.org/browser/favicon-service;1"].getService(ci.nsIFaviconService);
        // execute the query
        let root = services.get("history").executeQuery(query, options).root;
        root.containerOpen = true;
        //let items = util.map(util.range(0, root.childCount), function (i) {
        //    let node = root.getChild(i);
        //    return {
        //        url: node.uri,
        //        title: node.title,
        //        icon: node.icon || DEFAULT_FAVICON
        //    };
        //});
        let items = util.map(util.range(0, root.childCount), function (i) root.getChild(i));
        root.containerOpen = false; // close a container after using it!

        return items;
    },
    createView: function (item, hi)
<tr><td class="mark"/><td>{piyo.util.icon16(item.icon)}</td><td>{item.itemId}</td>
<td><div>{hi.title || "no title"}</div><div style="font-size:0.8em;color:green;">{hi.uri}</div></td></tr>,
    createItem: function (ui, modifiers) {
        //this.items = this.get(this.filter, 100);
        this.items = this.get("");
    },
    matcher: piyo.util.normalMatcher,
    //generator: function (ui) util.Array.itervalues(this.get("")),
    generator: function (ui) {
        let conn = Cc["@mozilla.org/browser/nav-history-service;1"].getService(Ci.nsPIPlacesDatabase).DBConnection;
        let favicon = services.get("favicon");
        let stmt = conn.createStatement(<![CDATA[
select mp.id, mp.url, mp.title, mp.favicon_id
from moz_historyvisits mh join moz_places mp on mh.place_id = mp.id
]]>);
        let count = 0;
        while(stmt.executeStep()) {
            let o = {
                get itemId() stmt.getInt64(0),
                get icon() {
                    try {
                    //return favicon.getFaviconForPage(services.get("io").newURI(this.uri, null, null)).spec;
                    return favicon.getFaviconImageForPage(services.get("io").newURI(this.uri, null, null)).spec;
                    } catch(ex) {
                        Cu.reportError(ex);
                        if (++count > 100)
                            piyo.ui.abort = true;
                        return "";
                    }
                },
                get uri() stmt.getUTF8String(1),
                get title() stmt.getUTF8String(2),
                get favicon() stmt.getInt64(3)
                //get last_visit_date() new Date(stmt.getInt64(3)/1000),
            };
            yield o;
        }
    }
});
piyo.ui.registerSource("history-d", "history", {
    createRoot: function () <div><div class="title"/></div>,
    createView: function (item, hi)
<div><span class="mark"/><span>{piyo.util.icon16(item.icon)}</span><span style="display:inline-block;">{hi.title || "no title"}<br/><span style="font-size:0.8em;color:green;">{hi.uri}</span></span></div>,
});

piyo.ui.registerSource("history-m", "history", {
    description: "history for XUL/Migemo",
    matcher: piyo.util.migemoMatcher
});
