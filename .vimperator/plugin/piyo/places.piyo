// vim:set ft=javascript sw=4 ts=4 et :

piyo.ui.registerSource("places", {
    title: "places",
    description: "places source",
    keys: ["title", "uri"],
    sql: <![CDATA[
select
mp.id, mp.url, mp.title, mp.favicon_id, mb.id
from moz_places mp left outer join moz_bookmarks mb
on mp.id = mb.fk and mb.title is not null
]]>,
//{{{
    createRoot: function () <table style="width:100%;border-collapse:collapse;table-layout:fixed;">
<style><![CDATA[
.x {color: gray;}
.y {color: orange;}
.u {font-size: .8em; color:green;}
.tag{position:absolute; right: 0; color: blue; top: 0;}
]]></style><thead>
<th style="width:1.5ex;"/>
<th style="width:32px;"/>
<th style=""/>
</thead><tbody class="content"/></table>,
    createView: function (i, h) <tr>
<td class="mark"/>
<td>{piyo.util.icon16(i.icon)}</td>
<td><div style="white-space:nowrap;text-overflow:ellipsis;overflow:hidden;position:relative;padding-right:4ex;">
<span class="t">{h.title || <span class="x">no title</span>}<br/>
<span class={i.bid === 0 ? "x" : "y"}>{"\u2605"}</span><span class="u">{h.uri}</span></span>
<span class="tag">[{i.tag}]</span>
</div>
</td></tr>,
//}}}
    generator: function (ui) { const self = this;return (obj for (obj in self.iterCache("place", function () {
        let conn = Cc["@mozilla.org/browser/nav-history-service;1"].getService(Ci.nsPIPlacesDatabase).DBConnection;
        let favicon = services.get("favicon");
        let stmt = conn.createStatement(this.sql);
        let count = 0;
        let tagging = PlacesUtils.tagging;
        try {
            function getIcon() {
                try {
                    let uri = services.get("io").newURI(this.uri, null, null);
                    return favicon.getFaviconImageForPage(uri).spec;
                } catch (ex) {return "";}
            }
            function getTags() {
                if (this.bid !== 0) {
                    let uri = services.get("io").newURI(this.uri, null, null);
                    let tags = tagging.getTagsForURI(uri, {});
                    return tags.join(",");
                } else { return ""; }
            }
            while(stmt.executeStep()) {
                let o = {};
                o.itemId  = stmt.getInt64(0);
                o.uri     = stmt.getUTF8String(1);
                o.title   = stmt.getUTF8String(2);
                o.favicon = stmt.getInt64(3);
                o.bid     = stmt.getInt64(4);
                lazyGetter(o, "icon", getIcon);
                lazyGetter(o, "tag", getTags);
                yield o;
            }
        } finally {
            stmt.reset();
        }
    })));
    },
    commands: function (commands) {
        commands.add(["t[abopen]"], "", function (args, modifiers) {
            liberator.open(
                modifiers.items.map(function (i) i.item.uri),
                {where: liberator.NEW_TAB}
            );
        });
    },
});

