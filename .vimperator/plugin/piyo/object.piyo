// vim:set sw=4 ts=4 ft=javascript:


function inspect(object) {
    return {
        title: "inspect",
        keys: ["name", "e4x"],
        createView: function (i, h) <tr><td class="mark"/><td>{h.name}</td><td>{i.inf}</td><td>{i.e4x}</td></tr>,
        generator: function () {
            let create = util.lazyProto({
                get name() this.item,
                get e4x() {
                    try {
                        return template.highlight(object[this.name], true)
                    } catch(ex) {
                        return template.highlight(ex, true);
                    }
                },
                get inf() {
                    let inf = "";
                    try {
                        let desc = util.desc(this.object, this.item);
                        inf = <></>;
                        for (let [, n] in Iterator(util.names(desc))) {
                            inf += <span style={"padding:0;color: " + (desc[n] != void(0) ? "blue": "gray")}>{n[0]}</span>;
                        }
                    } catch (ex) { inf = <span style="color:red;">?</span>; }
                    return inf;
                }
            });

            return this.iterCache("item", function () {
                function iterProto(object) {
                    for (; object; object = object.__proto__)
                        yield object;
                }
                for (let object in iterProto(object)) {
                    let create2 = util.lazyProto({
                        object: object
                    }, create.prototype);

                    for (let [, name] in Iterator(util.names(object))) {
                        yield create2(name, create.prototype);
                    }
                }
            });
        },
        maps: [
            PMap(["<Return>"], "", function () {
                let item = ui.getMarkedOrSelectedItem()[0];
                ui.push("", inspect(object[item.item.name]));
            }),
            PMap(["<BS>"], "", function () {
                if (ui._stack.length > 0)
                    ui.pop();
            }),
            PMap(["e"], "echo value", function () {
                ui.echo(<pre>{object[ui.selectedItem.item.name]}</pre>);
            }),
        ],
    };
}

commands.addUserCommand(["pecho"], "inspect result object", function (args) {
    commandline.close();
    let result = liberator.eval(args[0]);
    ui.input("", inspect(result));
}, {
    literal: 0,
    completer: completion.javascript,
}, true);

mappings.add([modes.PIYO], ["x"], "", function () {ui.push("", inspect(ui.selectedItem.item));});
