// vim:set syntax=javascript:

const focus = Cc["@mozilla.org/focus-manager;1"]
          .getService(Ci.nsIFocusManager);
commands.addUserCommand(["pse[lector]"], "", function (args) {
    let selector = args[0];
    commandline.close();
    ui.list(args["-input"], {
        keys: ["text"],
        title: <>selector[{selector}]</>.toString(),
        default: "select",
        createView: function (i, h) <tr><td class="mark"/><td align="right">{i.num}</td><td><pre>{h.text}</pre></td></tr>,
        generator: function () {
            var encoder = Cc['@mozilla.org/layout/documentEncoder;1?type=text/plain'] .createInstance(Ci.nsIDocumentEncoder);

            let stack = [content.window];
            while (win = stack.pop()) {
                stack.push.apply(stack, Array.slice(win.frames));
                for ([i, n] in Iterator(win.document.querySelectorAll(selector))) {
                    yield ({
                        num: i + 1,
                        node: n,
                        get text() {
                            let doc = this.node.ownerDocument;
                            encoder.init(this.node.ownerDocument,
                                         'text/plain',
                                         encoder.OutputBodyOnly | encoder.OutputLFLineBreak
                                        );
                            encoder.setNode(this.node);
                            return encoder.encodeToString();
                        }
                    });
                }
            }
        },
        commands: function (commands) {
            commands.add(["select"], "", function (args, modifiers) {
                let elem = modifiers.items[0].item.node;
                window.setTimeout(function () {
                    util.nodeScrollIntoView(elem);
                    //elem.focus();
                    //buffer.focusElement(elem),
                    //elem = focus.moveFocus(elem.ownerDocument.defaultView, elem, Ci.nsIFocusManager.MOVEFOCUS_CARET,
                    //    Ci.nsIFocusManager.FLAG_BYMOUSE);
                    //    //Ci.nsIFocusManager.FLAG_NOSCROLL | Ci.nsIFocusManager.FLAG_NOSWITCHFRAME);
                    //elem.blur();
                    //elem.focus();
                    let doc = elem.ownerDocument;
                    let r = doc.createRange();
                    //r.setStart(elem, 0);
                    r.selectNode(elem);
                    let selection = doc.defaultView.getSelection();
                    selection.removeAllRanges();
                    selection.addRange(r);
                    elem = focus.moveFocus(elem.ownerDocument.defaultView, null, Ci.nsIFocusManager.MOVEFOCUS_CARET,
                        Ci.nsIFocusManager.FLAG_NOSCROLL | Ci.nsIFocusManager.FLAG_NOSWITCHFRAME);
                    //r.setEnd(elem, 0);
                }, 0);
            });
            commands.add(["open"], "open tabs from href attribute", function (args, modifiers) {
                let aTab = gBrowser.selectedTab;
                let menu = util.getContextMenu();

                let array;
                Deferred.array(modifiers.items.map(function (a) a.item.node),
                function (param) {
                    try {
                    let node = param.value;
                    const str = "[href]";
                    if (!node.mozMatchesSelector(str)) {
                        node = node.querySelector(str);
                        if (!node) return;
                    }
                    menu.setTarget(node);
                    menu.openLinkInTab();
                    liberator.threadYield(true);
                    } catch(ex) {Cu.reportError(ex);}
                });
            });
        },
        maps: [
            PMap(["p"], "focus", function () {
                let node = ui.selectedItem.item.node;
                util.nodeScrollIntoView(node, 0, -1);
            }),
            PMap(["o"], "open background", function () {
                let node = ui.selectedItem.item.node;
                let menu = util.getContextMenu();
                menu.setTarget(node);
                menu.openLinkInTab();
            }),
        ]
    });
}, {
    literal: 0,
    options: [
        [["-input", "-i"], commands.OPTION_STRING],
    ],
    completer: function (context) plugins.completeQueryselector.complete(context, content.document),
}, true);
