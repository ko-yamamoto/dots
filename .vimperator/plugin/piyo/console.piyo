// vim:set ft=javascript sw=4 ts=4 et :

const console = services.get("console");

ui.registerSource("console", {
    description: "console log list",
    title: "console log",
    keys: ["message"],
    createView: function (item, hi)
        <tr><td class="mark"/><td style={item.style}>{item.category}</td><td>{hi.message}</td></tr>,
    generator: function () {
        let a = {}, b = {};
        console.getMessageArray(a, b);

        let message = {
            category: "",
            style: "",
            get message() this.item.message,
        };
        let script = {
            get category() this.item.category,
            get message() this.item.errorMessage,
            get style () {
                let cat = this.category;
                if (/javascript/i.test(cat)) {
                    var bg = "rgba(255, 0, 0, .3)";
                    var fg = "#f00";
                } else if (/css/i.test(cat)) {
                    bg = "rgba(0, 255, 0, .3)";
                    fg = "green";
                } else {
                    fg = "black";
                }
                return <>color:{fg};font-weight:bold;-moz-border-radius:4px;text-shadow: 0 0 1px white;</>;
            },
        };

        function getProto(item) {
            if (item instanceof Ci.nsIScriptError)
                var proto =  script;
            else
                proto = message;

            return {
                __proto__: proto,
                item: item
            };
        }
        let items = a.value;
        for (let i = items.length - 1; i >= 0; --i)
            yield getProto(items[i]);
    },
    commands: function (commands) {
        commands.add(["reset", "clear"], "reset console log", function () {
            console.reset();
        });
        commands.add(["desc[ription]"], "show detail (no impl now)", function (args, modifiers) {
            let x = modifiers.items[0].item.item;
            if (x)
                ui.setTimeout(function () {
                    liberator.echo(util.objectToString(x, true));
                }, 0);
        });
        commands.add(["open"], "open source file", function (args, modifiers) {
            modifiers.items.forEach(function (i) {
                let item = i.item.item;
                if (item.sourceName) {
                    gBrowser.addTab(item.sourceName.split("->").pop().trim(),{
                        relatedToCurrent: true
                    });
                }
            });
        });
    }
});
