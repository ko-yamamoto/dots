(require 'mi)
(setq mi-use-dls-synth t)
(mi-setup)

(defun string-line (notes)
  (let ((ch 2)
        (a (mi-random '(2 3))))
    (mi-sound-select ch 'string-ensemble1)
    (mi-play (mi-random notes) 0 a ch)
    (mi-play (mi-random notes) a (- 4 a) ch)))

(defun bass-line (notes)
  (let ((ch 3)
        (a (mi-random '(1 1.5 2)))
        (b (mi-random '(2.5 3))))
    (mi-sound-select ch 'rock-organ)
    (mi-play (mi-oct-down (car notes)) 0 a ch)
    (mi-play (mi-oct-down (mi-random notes)) a b ch)
    (mi-play (mi-oct-down (mi-random notes)) b (- 4 b) ch)))

(defun my-beat ()
  (mi-seq 1/16
             (closed-hi-hat x--- x-x- x--- xxxx x--- x-x- x---  xxxx x--- x-x- x--- xxxx x--- x-x- x--- xxxx)
             (open-hi-hat    ---- ---- x--- ---- ---- ---- x--- ---- ---- ---- x--- ---- ---- ---- x--- ----)
             (snare-drum1   ---- x--- ---- x--- ---- x--- ----  x--- ---- x--- ---- x--- ---- x--- ---- x--x)
             (bass-drum1    x--- ---- --x- --x- x--x ---x x-x-  --x- x--- ---- --x- --x- x--x ---x x-x- --x-)
))

(defun cannon (&optional x) ;)
  (let ((key '(C4 major-triad)))
    (let ((delay 0))
      (mapcar (lambda (progress)
                (let ((chords (mi-diatonic (car key) (cadr key) progress))
                      (dur (* 4 delay)))
                  (mi-callback dur 'bass-line chords)
                  (mi-callback dur 'string-line chords)
                  (mi-play chords dur 4 1)
                  )
                (setq delay (1+ delay)))
              (if x '(iv i iv v) '(i v vi iii)))))
  (my-beat)
  (mi-callback 16 'cannon (if x nil t)))

(cannon)